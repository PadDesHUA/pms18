---
- name: Dynamic Host Selection from Vagrant Status
  hosts: localhost
  gather_facts: no
  # vars:
  #   vagrant_folder: "/home/itp22109/pms18/Vagrant"
  #   vagrant_status_command: "cd {{ vagrant_folder }} && vagrant status | awk '{print $1}' | awk 'NR>2' | head -n -3"
  tasks: 
    - name: Get Vagrant VMs
      shell: |
        cd /home/itp22109/pms18/Vagrant
        vagrant status | awk '{print $1}' | awk 'NR>2' | head -n -3
      register: vagrant_output

    - name: Extract VM names
      set_fact:
        vm_names: "{{ vagrant_output.stdout_lines }}"

    - name: Display VM choices
      debug:
        msg: "Select a VM: {{ vm_names }}"

    - name: User Input
      pause:
        prompt: "Choose a VM from the list above"
      register: user_choice

    - name: Execute tasks on selected VM
      debug:
        msg: "You chose: {{ user_choice.user_input }}"

      # You can replace the debug task with your actual tasks that use the selected VM name.
      # For example:
      # - name: Execute tasks on selected VM
      #   shell: "ansible-playbook -i {{ user_choice.user_input }}, your_tasks.yml"





# - name: Provision Control Station with Vagrant
#   hosts: localhost
#   gather_facts: no

#   tasks:
#     - name: Run Vagrant Up Control Station
#       command: vagrant up control
#       args:
#         chdir: /home/itp22109/pms18/Vagrant/
#       tags:
#         - vagrant_provision

# - name: Provision VM using Vagrant
#   hosts: localhost
#   gather_facts: true
#   tasks:
#     - name: Execute Vagrant up
#       command: vagrant up
#       args:
#         chdir: /home/itp22109/pms18/Vagrant/
#       become: false
#       tags:
#         - vagrant_all

# - name: Ask user for VM choice
#   hosts: localhost
#   gather_facts: no
#   tasks:
#     - name: Prompt user for VM choice
#       ansible.builtin.vars_prompt:
#         prompt: "Which VM to create (control, oc-srv-01, infdb-srv-01, tlg-srv-01, grf-srv-01)?"
#         private: no
#       register: vm_choice

# - name: Execute tasks based on user's VM choice
#   hosts: localhost
#   gather_facts: no
#   tasks:
#     - name: Include tasks for selected VM
#       include_tasks: "tasks/{{ vm_choice.stdout }}.yml"

- name: Read local /etc/hosts file
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Read /etc/hosts file
      shell: cat /etc/hosts | grep 192.168.56. > ~/pms18/Vagrant/pms18_hosts


- name: Append local /etc/hosts entries to remote hosts
  hosts: all
  become: yes
  tasks:
    - name: Append /etc/hosts entries
      shell: cat /vagrant/pms18_hosts >> /etc/hosts

- name: Execute tasks based on selected VM
  hosts: localhost
  gather_facts: no
  tasks:
    - name: Include tasks for selected VM
      include_tasks: "{{ selected_vm.user_input }}_tasks.yml"


- name: Install necessary packages at control station
  hosts: control
  remote_user: vagrant
  become: true
  tasks:
    - name: Update apt update_cache
      apt:
        update_cache: yes
      when: ansible_os_family == 'Debian'
      tags:
        - update_apt_cache

    - name: Install packages
      apt:
        name: "{{ item }}"
        state: present
      with_items:
        - vagrant
        - virtualbox
        - virtualbox-ext-pack
        - virtualbox-qt
        - ansible
      when: ansible_os_family == 'Debian'
      ignore_errors: yes
      tags:
        - install_packages

# - name: Configure and Install ownCloud
#   hosts: oc-srv-01
#   become: yes
#   vars:
#    ansible_python_interpreter: /usr/bin/python3
  
#   tasks:
#     - name: Add PHP repository
#       apt_repository:
#         repo: ppa:ondrej/php
#         state: present
#       become: yes

#     - name: Update and upgrade packages
#       apt:
#         update_cache: yes
#         upgrade: yes
#       become: yes

#     - name: Install required packages
#       apt:
#         name: "{{ item }}"
#         state: present
#       become: yes
#       loop:
#         - php7.4 
#         - php7.4-intl
#         - php7.4-mysql
#         - php7.4-mbstring
#         - php7.4-imagick
#         - php7.4-igbinary
#         - php7.4-gmp
#         - php7.4-bcmath
#         - php7.4-curl
#         - php7.4-gd 
#         - php7.4-zip
#         - php7.4-imap
#         - php7.4-ldap
#         - php7.4-bz2
#         - php7.4-ssh2
#         - php7.4-common
#         - php7.4-json
#         - php7.4-xml
#         - php7.4-dev
#         - php7.4-apcu
#         - php7.4-redis
#         - libsmbclient-dev
#         - php-pear
#         - php-phpseclib
#         - smbclient
#         - redis-server
#         - unzip
#         - openssl
#         - rsync
#         - imagemagick
#         - libapache2-mod-php7.4
#         - apache2
#         - mariadb-server
#         - mariadb-client
#         - python3-mysql.connector 

#     - name: Set PHP alternatives
#       command: "sudo update-alternatives --set {{ item }}"
#       loop:
#         - "php /usr/bin/php7.4"
#         - "phar /usr/bin/phar7.4"
#         - "phar.phar /usr/bin/phar.phar7.4"
#         - "phpize /usr/bin/phpize7.4"
#         - "php-config /usr/bin/php-config7.4"

#     - name: Create smbclient.ini
#       block:
#         - name: Creat file 
#           shell: touch "/etc/php/7.4/mods-available/smbclient.ini"
#         - name: Append file
#           lineinfile:
#             path: "/etc/php/7.4/mods-available/smbclient.ini"
#             line: "extension=smbclient.so"
#           become: yes

#     - name: Enable smbclient module
#       command: "sudo phpenmod smbclient"

#     - name: Restart Apache
#       service:
#         name: apache2
#         state: restarted
#       become: yes

#     - name: Create MariaDB root user
#       mysql_user:
#         name: root
#         host: localhost
#         password: "password"
#         priv: "*.*:ALL,GRANT"
#       become: yes
#       ignore_errors: yes

#     - name: Create ownCloud database and user
#       mysql_db:
#         name: owncloud
#         state: present
#       become: yes
#       ignore_errors: yes

#     - name: Grant privileges to ownCloud user
#       mysql_user:
#         name: ocuser
#         host: localhost
#         password: ocpassword
#         priv: "owncloud.*:ALL"
#       become: yes
#       ignore_errors: yes

#     - name: Download and verify ownCloud
#       block:
#         # - name: Download ownCloud
#         #   shell: wget "https://download.owncloud.com/server/stable/owncloud-complete-latest.tar.bz2"

#         - name: Download ownCloud
#           get_url:
#             url: "https://download.owncloud.com/server/stable/owncloud-complete-latest.tar.bz2"
#             dest: "/tmp/owncloud-complete-latest.tar.bz2"

#         - name: Download keyfile
#           get_url:
#             url: "https://download.owncloud.com/server/stable/owncloud-complete-latest.tar.bz2.sha256"
#             dest: "/tmp/owncloud-complete-latest.tar.bz2.sha256"
#           ignore_errors: yes

#         - name: Verify key file
#           shell: "sha256sum -c owncloud-complete-latest.tar.bz2.sha256 < owncloud-complete-latest.tar.bz2"
#           args:
#             chdir: "/tmp"
#           register: sha_verification
#           failed_when: sha_verification.rc != 0
#           ignore_errors: yes

#     # - name: Unzip owncloud
#     #   shell: |
#     #     tar -xjvf owncloud-complete-latest.tar.bz2 
#     #     sudo cp -r owncloud /var/www/
#     - name: Unzip ownCloud
#       unarchive:
#         src: "/tmp/owncloud-complete-latest.tar.bz2"
#         dest: "/var/www/"
#         extra_opts: ['--strip-components=1']
#       when: sha_verification.rc == 0

#     - name: Set permissions
#       file:
#         path: "/var/www/owncloud"
#         owner: www-data
#         group: www-data
#         recurse: yes
#       become: yes

# - name: Initial ownCloud Configuration
#   hosts: oc-srv-01
#   become: yes

#   vars:
#     owncloud_admin_password: "ocpassword" 

#   tasks:
#     - name: Set data folder permissions
#       file:
#         path: "/var/www/owncloud/data"
#         owner: www-data
#         group: www-data
#         recurse: yes
#       tags: ['setup']

#     - name: Configure ownCloud
#       shell: |
#         sudo -u www-data php /var/www/owncloud/occ maintenance:install \
#         --database "mysql" \
#         --database-name "owncloud" \
#         --database-user "ocuser" \
#         --database-pass "ocpassword" \
#         --admin-user "ocuser" \
#         --admin-pass "{{ owncloud_admin_password }}"
#       args:
#         executable: /bin/bash
#       register: owncloud_setup
#       environment:
#         OC_PASS: "{{ owncloud_admin_password }}"
#       tags: ['setup']

#     - name: Display ownCloud setup result
#       debug:
#         var: owncloud_setup.stdout_lines

#     - name: Restart Apache (and PHP)
#       service:
#         name: apache2
#         state: restarted
#       become: yes



- name: Install InfluxDB
  hosts: infdb-srv-01
  become: yes

  tasks:
    - name: Download InfluxData archive key
      command: wget -q https://repos.influxdata.com/influxdata-archive_compat.key
      register: key_download_result

    - name: Verify key using sha256sum
      shell: echo '393e8779c89ac8d958f81f942f9ad7fb82a25e133faddaf92e15b16e6ac9ce4c influxdata-archive_compat.key' | sha256sum -c
      register: key_verification_result
      failed_when: key_verification_result.rc != 0

    - name: Import key and trust GPG key
      shell: cat influxdata-archive_compat.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg > /dev/null
      when: key_verification_result.rc == 0

    - name: Add InfluxData repository
      shell: echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install InfluxDB
      apt:
        name: influxdb
        state: present

    - name: Start InfluxDB service
      service:
        name: influxdb
        state: started

    - name: Download InfluxData public key
      command: curl -s https://repos.influxdata.com/influxdata-archive_compat.key
      register: key_download_result

    - name: Import InfluxData public key
      command: echo "{{ key_download_result.stdout }}" | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg > /dev/null

    - name: Download InfluxDB release archive
      command: wget https://dl.influxdata.com/influxdb/releases/influxdb-1.8.10_linux_amd64.tar.gz
      register: download_result

    - name: Download InfluxDB release archive
      command: curl -o influxdb-1.8.10_linux_amd64.tar.gz https://dl.influxdata.com/influxdb/releases/influxdb-1.8.10_linux_amd64.tar.gz
      register: download_result
      ignore_errors: yes

    - name: Import InfluxData public key for verification
      command: gpg --import /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg

    - name: Verify signature
      command: gpg --verify influxdb-1.8.10_linux_amd64.tar.gz.asc influxdb-1.8.10_linux_amd64.tar.gz
      register: signature_verification_result
      failed_when: signature_verification_result.rc != 0
      changed_when: false

    - name: Prompt installation success
      debug:
        msg: "InfluxDB installation, user setup, and verification successful."
      when: '"gpg: Good signature from \\"InfluxDB Packaging Service <support@influxdb.com>\\" [unknown]" in signature_verification_result.stdout'

    - name: Create initial user
      shell: influx -execute "CREATE USER influx_admin WITH PASSWORD 'password' WITH ALL PRIVILEGES"
      changed_when: false

    - name: Get authentication token
      shell: influx auth create -n influx_admin -p 'password' --org pms18@HUA --hide-headers | awk '{print $3}'
      register: auth_token

    - name: Store authentication token to file
      copy:
        content: "{{ auth_token.stdout }}"
        dest: /home/vagrant/.ssh/infdb-token
        owner: vagrant
        group: vagrant
        mode: "0644"

- name: Install Telegraf
  hosts: tlg-srv-01
  become: yes
  tasks:
    - name: Download the InfluxData GPG key
      command: wget -q https://repos.influxdata.com/influxdata-archive_compat.key

    - name: Verify the GPG key using sha256sum
      command: echo '393e8779c89ac8d958f81f942f9ad7fb82a25e133faddaf92e15b16e6ac9ce4c influxdata-archive_compat.key' | sha256sum -c

    - name: Add the GPG key to trusted keys
      shell: cat influxdata-archive_compat.key | gpg --dearmor | sudo tee /etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg > /dev/null

    - name: Add the InfluxData repository to sources.list.d
      shell: echo 'deb [signed-by=/etc/apt/trusted.gpg.d/influxdata-archive_compat.gpg] https://repos.influxdata.com/debian stable main' | sudo tee /etc/apt/sources.list.d/influxdata.list

    - name: Update apt cache
      apt:
        update_cache: yes

    - name: Install Telegraf
      apt:
        name: telegraf
        state: present
      
- name: Install and configure Grafana
  hosts: grf-srv-01
  become: true
  tasks:
    - name: Install prerequisites
      apt:
        name: "{{ item }}"
        state: present
      loop:
        - apt-transport-https
        - software-properties-common
        - wget
    
    - name: Add Grafana GPG key
      shell: |
        sudo wget -q -O /usr/share/keyrings/grafana.key https://apt.grafana.com/gpg.key --no-check-certificate
      changed_when: false  # Assuming the key doesn't change frequently

    - name: Add Grafana repository
      shell: |
        echo "deb [signed-by=/usr/share/keyrings/grafana.key] https://apt.grafana.com stable main" | sudo tee -a /etc/apt/sources.list.d/grafana.list

      # blockinfile:
      #   path: /etc/apt/sources.list.d/grafana.list
      #   block: |
      #     deb [signed-by=/usr/share/keyrings/grafana.key] https://apt.grafana.com stable main
      #     deb [signed-by=/usr/share/keyrings/grafana.key] https://apt.grafana.com beta main

    - name: Update package cache
      apt:
        update_cache: yes

    - name: Install Grafana
      apt:
        name: grafana
        state: present
        allow_unauthenticated: yes  # Allow installation of unauthenticated packages

    - name: Reload systemd
      systemd:
        daemon_reload: yes

    - name: Start Grafana service
      systemd:
        name: grafana-server
        state: started
        enabled: yes

    - name: Check Grafana service status
      shell: | 
        sudo systemctl status grafana-server



  handlers:
    - name: Start InfluxDB service
      systemd:
          name: influxdb
          state: started